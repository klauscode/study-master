%% StudyFall Game Loop Flow Diagram
%% Generated by Idle-Game Auditor v1.2

graph TD
    %% Entry Points
    Start([Game Start]) --> Init[Initialize State<br/>Level 1, Focus 1.0x<br/>100 Stamina, Starter Gear]
    Init --> LoadGems[Load Subject Gems<br/>from UNICAMP Topics]
    LoadGems --> SelectGem[Auto-Select First Gem<br/>if enabled]
    SelectGem --> StudyStart[START_STUDY Action]

    %% Main Game Loop
    StudyStart --> MainLoop{Main Timer Loop<br/>1-second intervals}
    MainLoop --> Tick[TICK Action<br/>deltaSeconds: 1]

    %% TICK Processing
    Tick --> UpdateFocus[Update Focus<br/>+0.01/60s while studying<br/>-0.05/s after 120s pause]
    UpdateFocus --> UpdateStamina[Update Stamina<br/>-10 per hour studied<br/>+1 per 10min rest]
    UpdateStamina --> CheckStudying{isStudying &&<br/>mode === 'study'?}

    %% Study Path
    CheckStudying -->|Yes| AddXP[ADD_XP Action<br/>Base: 20 XP/min<br/>× focus × gear × consumables<br/>× fatigue penalty]
    AddXP --> UpdateSession[Update Session Timers<br/>elapsedSeconds++<br/>studySecondsThisCycle++<br/>focusIntegralSeconds += focus]
    UpdateSession --> CheckCycleComplete{Cycle Complete?<br/>elapsedSeconds ≥ 3000s}

    %% Cycle Completion
    CheckCycleComplete -->|Yes| GenerateLoot[Generate Loot<br/>Items: 3 + floor(focus×2)<br/>+ gear bonuses<br/>+ consumable bonuses]
    GenerateLoot --> GenerateOrbs[Generate Currency<br/>Guaranteed: 4 Map Fragment<br/>2 Transmute, 1 Alchemy<br/>+ random weighted drops]
    GenerateOrbs --> ApplyPity[Apply Pity System<br/>Ensure rare after 2 cycles<br/>without rare drops]
    ApplyPity --> RecordCycle[Record Cycle Analytics<br/>XP gained, focus average<br/>loot count, timestamps]
    RecordCycle --> StartRest[START_REST Action<br/>mode = 'rest'<br/>reset timers]

    %% Rest Path
    CheckStudying -->|No| CheckResting{mode === 'rest'?}
    CheckResting -->|Yes| UpdateRestTimer[Update Rest Timer<br/>restElapsedSeconds++]
    UpdateRestTimer --> CheckRestComplete{Rest Complete?<br/>restElapsedSeconds ≥ 600s}
    CheckRestComplete -->|Yes| StudyStart
    CheckRestComplete -->|No| MainLoop

    %% Continue Study
    CheckCycleComplete -->|No| MainLoop
    CheckResting -->|No| MainLoop

    %% Daily Reset System
    MainLoop --> CheckDailyReset{Daily Reset?<br/>06:00 Sao Paulo Time}
    CheckDailyReset -->|Yes| DailyReset[Reset Stamina: 100<br/>Reset study minutes: 0<br/>Generate new tasks]
    DailyReset --> MainLoop
    CheckDailyReset -->|No| MainLoop

    %% Side Systems
    StartRest --> UpdateTasks[Update Task Progress<br/>Study minutes, cycles<br/>Category balance]
    UpdateTasks --> SmartTaskGen{Hourly Task<br/>Generation?}
    SmartTaskGen -->|Yes| GenTasks[Generate Smart Tasks<br/>SRS reviews, category balance<br/>exam preparation]
    GenTasks --> MainLoop
    SmartTaskGen -->|No| MainLoop

    %% Background Systems
    MainLoop --> SaveGame[Auto-Save<br/>Every 5 seconds]
    SaveGame --> ExpireBuffs[Expire Active<br/>Consumables & Rewards]
    ExpireBuffs --> MainLoop

    %% User Interactions
    UserBuy[User: Buy Consumable] --> AddToUsables[Add to Usables Inventory]
    AddToUsables --> UseConsumable[USE_USABLE Action]
    UseConsumable --> ActivateConsumable[Add to activeConsumables<br/>Apply effects to calculations]
    ActivateConsumable --> MainLoop

    UserCraft[User: Craft Item] --> ConsumeCurrency[CONSUME_CURRENCY<br/>Spend orbs for crafting]
    ConsumeCurrency --> GenerateItem[Generate Enhanced Item<br/>Better rarity/affixes]
    GenerateItem --> AddToInventory[ADD_TO_INVENTORY]
    AddToInventory --> MainLoop

    %% Critical Balance Points (Highlighted)
    classDef balanceCritical fill:#ff9999,stroke:#ff0000,stroke-width:2px
    classDef balanceWarning fill:#ffff99,stroke:#ff9900,stroke-width:2px
    classDef systemCore fill:#99ccff,stroke:#0066cc,stroke-width:2px

    class GenerateLoot,GenerateOrbs,ApplyPity balanceCritical
    class UpdateFocus,AddXP,UpdateStamina balanceWarning
    class MainLoop,Tick,StudyStart systemCore

    %% Subsystem Details
    subgraph "XP Calculation Details"
        XPBase[Base: 20 XP/min] --> XPFocus[× Focus Multiplier<br/>1.0 - 1.5]
        XPFocus --> XPGear[× Gear Bonuses<br/>+% XP affixes]
        XPGear --> XPConsumable[× Consumable Buffs<br/>1.5x - 2.0x]
        XPConsumable --> XPFatigue[× Fatigue Penalty<br/>0.8x if stamina < 30]
        XPFatigue --> XPFinal[Final XP/minute]
    end

    subgraph "Loot Generation Details"
        LootBase[Base: 3 items] --> LootFocus[+ floor(focus × 2)]
        LootFocus --> LootMomentum[+ Momentum Bonus<br/>+1 per 15min, max +2]
        LootMomentum --> LootGear[× Gear Quantity Bonus<br/>+% from affixes]
        LootGear --> LootConsumables[× Consumable Multipliers]
        LootConsumables --> LootTriple{Triple Loot Buff?}
        LootTriple -->|Yes| LootTripleApply[× 3 multiplier]
        LootTriple -->|No| LootFinalCount[Final Item Count]
        LootTripleApply --> LootFinalCount
    end

    subgraph "Currency Economy"
        CurrencySources[Currency Sources:<br/>• Guaranteed minimums<br/>• Random weighted drops<br/>• Task rewards]
        CurrencySinks[Currency Sinks:<br/>• Shop consumables<br/>• Crafting operations<br/>• Map modifications]
        CurrencyFlow[Net Flow Analysis<br/>Sources > Sinks by ~2:1<br/>Potential oversupply]
        CurrencySources --> CurrencyFlow
        CurrencySinks --> CurrencyFlow
    end

    %% Problem Areas Highlighted
    LootTripleApply -.->|BALANCE ISSUE| BalanceNote1[Multiplicative stacking<br/>creates extreme outcomes]
    XPConsumable -.->|BALANCE ISSUE| BalanceNote2[5.25x XP multiplier<br/>possible with stacking]
    UpdateFocus -.->|BALANCE ISSUE| BalanceNote3[Harsh 10s decay<br/>discourages breaks]

    classDef balanceIssue fill:#ffcccc,stroke:#cc0000,stroke-width:1px,stroke-dasharray: 5 5
    class BalanceNote1,BalanceNote2,BalanceNote3 balanceIssue